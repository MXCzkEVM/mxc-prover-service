VERBOSITY=3
############################### DEFAULT #####################################
# Chain ID
CHAIN_ID=5167004

#PROVER_STARTING_BLOCK_ID=1046406

# Exposed ports
PORT_PROVER_SERVER=9876
# Comma-separated profiles to be used by default (l2_execution_engine,proposer,prover)
COMPOSE_PROFILES=prover

# Taiko protocol contract addresses
TAIKO_L1_ADDRESS=0x6a5c9E342d5FB5f5EF8a799f0cAAB2678C939b0B
TAIKO_TOKEN_L1_ADDRESS=0x8cfc40cfe94ef106ceec7d0c97e4f02af99954a4
TAIKO_L2_ADDRESS=0x1000777700000000000000000000000000000001

# P2P
DISABLE_P2P_SYNC=false
P2P_SYNC_URL=

############################### REQUIRED #####################################
# L1 Mainnet RPC endpoints (you will need an RPC provider such as BlockPi, or run a full Mainnet node yourself).
# If you are using a local Mainnet L1 node, you can refer to it as "http://host.docker.internal:8545" and "ws://host.docker.internal:8546", which refer to the default ports in the .env for an eth-docker L1 node.
# However, you may need to add this host to docker-compose.yml. If that does not work, you can try the private local ip address (e.g. http://192.168.1.15:8545). You can find that with `ip addr show` or a similar command.
# In addition, you can use your public ip address followed by the specific ports for http and ws (e.g. http://82.168.1.15:8545). You can find that with `hostname -I | awk '{print $1}'`.
L1_ENDPOINT_HTTP=https://arbitrum-sepolia.blockpi.network/v1/rpc/8a2b88544c3a8f9e524040c85ce020030cb2935b
L1_ENDPOINT_WS=wss://arbitrum-sepolia.blockpi.network/v1/ws/8a2b88544c3a8f9e524040c85ce020030cb2935b
# HTTP RPC endpoint of a L1 beacon node. Everything behind the top-level domain is ignored. Make sure you don't need to work with subdirectories. The path will always be /eth/v1...
# If you are using a local Mainnet L1 node, you can refer to it as "http://host.docker.internal:5052", which refer to the default REST port in the .env for an eth-docker L1 node.
# Or follow the recommendations for http RPC endoint using the default REST port "5052", (e.g. http://82.168.1.15:5052).
L1_BEACON_HTTP=

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=true
# SGX Raiko service endpoint, default to local docker0.
SGX_RAIKO_HOST=http://moonchain_prover_manager:8181
# How many provers you want to run concurrently.
PROVER_CAPACITY=1
# A L1 account private key (with a balance of TAIKO deposited on TaikoL1) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=
#Amount to approve TaikoL1 contracts for TaikoToken usage. i.e 250 TAIKO = 250
TOKEN_ALLOWANCE=
# Minimum ETH balance (in ETH) a prover wants to keep.
MIN_ETH_BALANCE=
# Minimum Taiko token balance (in ether) a prover wants to keep. i.e 250 TAIKO = 250
MIN_TAIKO_BALANCE=
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=true

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`.
ENABLE_PROPOSER=false
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions.
L1_PROPOSER_PRIVATE_KEY=
# Address of the proposed block's suggested L2 fee recipient.
L2_SUGGESTED_FEE_RECIPIENT=
# Comma-delineated list (no spaces) of prover endpoints proposer should query when attempting to propose a block
# If you keep this default value you must also enable a prover by setting ENABLE_PROVER=true.
# Whether to send EIP-4844 blob transactions when proposing blocks.
BLOB_ALLOWED=false
# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions.
TXPOOL_LOCALS=
# Minimum tip (in GWei) for a transaction to propose.
EPOCH_MIN_TIP=

# ProverSet Address: We highly recommend you consult the deploy a proverset guide and use separate EOAs for prover and proposer to prevent nonce issues.
PROVER_SET=0x103FF2E2dfd9D5a163B652D8a913a4B0cA0AcBbB
# GUARDIAN_PROVER setting
GUARDIAN_PROVER_MINORITY=
GUARDIAN_PROVER_MAJORITY=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.
TX_FEE_LIMIT_MULTIPLIER=
TX_FEE_LIMIT_THRESHOLD=
TX_GAS_LIMIT=3000000
TX_MIN_BASEFEE=
TX_MIN_TIP_CAP=
TX_NOT_IN_MEMPOOL=
TX_NUM_CONFIRMATIONS=1
TX_RECEIPT_QUERY=
TX_RESUBMISSION=
TX_SAFE_ABORT_NONCE_TOO_LOW=
TX_SEND_TIMEOUT=
EPOCH_INTERVAL=12s
EPOCH_MIN_PROPOSING_INTERNAL=4h

PROVER_L1_NODE_VERSION=1
PROVER_L2_NODE_VERSION=1
BACKOFF_RETRY_INTERVAL=6s

# For Prover Manager
MOONCHAIN_SERVICE_MODE=PROVER_MANAGER
NODE_ENV=production

MOONCHAIN_MYSQL_HOST=mysql
MOONCHAIN_MYSQL_PORT=3306
MOONCHAIN_MYSQL_USER=root
MOONCHAIN_MYSQL_PASSWORD=
MOONCHAIN_INFLUXDB_URL=http://influxdb:8086
MOONCHAIN_INFLUXDB_TOKEN=

MYSQL_ROOT_PASSWORD=
MYSQL_DATABASE=prover

PROVER_SERVICE_KEY=

DOCKER_INFLUXDB_INIT_MODE=setup
DOCKER_INFLUXDB_INIT_USERNAME=admin
DOCKER_INFLUXDB_INIT_PASSWORD=
DOCKER_INFLUXDB_INIT_ORG=moonchain
DOCKER_INFLUXDB_INIT_BUCKET=default
DOCKER_INFLUXDB_INIT_RETENTION=40d
DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=
